--- a/net/minecraft/world/entity/ai/behavior/BehaviorFollowAdult.java
+++ b/net/minecraft/world/entity/ai/behavior/BehaviorFollowAdult.java
@@ -8,6 +8,13 @@
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryTarget;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+// CraftBukkit end
+
 public class BehaviorFollowAdult {
 
     public BehaviorFollowAdult() {}
@@ -25,9 +32,20 @@
                     if (!entityageable.isBaby()) {
                         return false;
                     } else {
-                        EntityAgeable entityageable1 = (EntityAgeable) behaviorbuilder_b.get(memoryaccessor);
+                        EntityLiving entityageable1 = (EntityAgeable) behaviorbuilder_b.get(memoryaccessor); // CraftBukkit - type
 
                         if (entityageable.closerThan(entityageable1, (double) (uniformint.getMaxValue() + 1)) && !entityageable.closerThan(entityageable1, (double) uniformint.getMinValue())) {
+                            // CraftBukkit start
+                            EntityTargetLivingEntityEvent event = CraftEventFactory.callEntityTargetLivingEvent(entityageable, entityageable1, EntityTargetEvent.TargetReason.FOLLOW_LEADER);
+                            if (event.isCancelled()) {
+                                return false;
+                            }
+                            if (event.getTarget() == null) {
+                                memoryaccessor.erase();
+                                return true;
+                            }
+                            entityageable1 = ((CraftLivingEntity) event.getTarget()).getHandle();
+                            // CraftBukkit end
                             MemoryTarget memorytarget = new MemoryTarget(new BehaviorPositionEntity(entityageable1, false), (Float) function.apply(entityageable), uniformint.getMinValue() - 1);
 
                             memoryaccessor1.set(new BehaviorPositionEntity(entityageable1, true));
